#!/usr/bin/env python3

import os
import sys
import json
import base64
import shutil
import tempfile
import subprocess

def which(x):
    if xx := shutil.which(x):
        return xx

    raise Exception(f'can not find {x}')

def it_tools():
    for x in ['strip', 'objcopy', 'objdump', 'ar']:
        yield x, which('llvm-' + x)

    for x in ['clang', 'clang++']:
        yield x, which(x)

    yield 'python3', os.path.abspath(sys.executable)

tools = dict(it_tools())

flags = {
    'SANDBOXING': 'yes',
    'MUSL': 'yes',
    'APPLE_SDK_LOCAL': 'yes',
    'CLANG_COVERAGE': 'no',
    'CONSISTENT_DEBUG': 'yes',
    'DISABLE_YMAKE_CONF_CUSTOMIZATION': 'yes',
    'NO_DEBUGINFO': 'yes',
    'OPENSOURCE': 'yes',
    'OS_SDK': 'local',
    'TIDY': 'no',
    'USE_ARCADIA_PYTHON': 'yes',
    'USE_CLANG_CL': 'yes',
    'USE_PREBUILT_TOOLS': 'no',
    'USE_PYTHON3': 'yes',
    'BUILD_PYTHON_BIN': tools['python3'],
    'BUILD_PYTHON3_BIN': tools['python3'],
    'GG_BUILD_TYPE': 'release',
    # target flags
    'USER_CFLAGS': os.environ.get('CFLAGS', ''),
    'USER_CONLYFLAGS': os.environ.get('CONLYFLAGS', ''),
    'USER_CXXFLAGS': os.environ.get('CXXFLAGS', ''),
    'USER_LDFLAGS': os.environ.get('LDFLAGS', ''),
}

for x, y in tools.items():
    x = x.upper()
    x = x.replace('+', '_PL')

    flags[x + '_TOOL'] = y
    flags[x + '_TOOL_VENDOR'] = y

def gen_tp():
    plat = {
        'arch': 'x86_64',
        'os': 'LINUX',
        'toolchain': 'default',
    }

    payload = {
        'build_type': flags['GG_BUILD_TYPE'],
        'flags': flags,
        'name': 'clang',
        'params': {
            'c_compiler': tools['clang'],
            'cxx_compiler': tools['clang++'],
            'objcopy': tools['objcopy'],
            'strip': tools['strip'],
            'ar': tools['ar'],
            'type': 'clang',
            'version': '18',
        },
        'platform': {
            'host': plat,
            'target': plat,
        },
        'platform_name': 'DEFAULT-LINUX-X86_64',
    }

    return base64.b64encode(json.dumps(payload).encode()).decode()

root = os.path.abspath(os.getcwd())

def it_flags(flags):
    for k, v in flags.items():
        yield '-D'
        yield f'{k}={v}'

def gen_conf_call():
    res = [
        sys.executable,
        root + '/build/ymake_conf.py',
        root,
        'dist-' + flags['GG_BUILD_TYPE'],
        'no',
        '--toolchain-params',
        gen_tp(),
        '-l',
    ] + list(it_flags(flags))

    return res

def gen_conf():
    env = os.environ.copy()

    env['PYTHONPATH'] = root + '/contrib/python/six/py3'

    return subprocess.check_output(gen_conf_call(), env=env)

conf = gen_conf()

def run_ymake(conf, target):
    with tempfile.TemporaryDirectory() as td:
        with open(td + '/conf', 'wb') as f:
            f.write(conf)

        ymake_call = [
            'ymake',
            '--warn', 'dirloops,ChkPeers',
            '--write-meta-data', td + '/md',
            '--config', td + '/conf',
            '--plugins-root', root + '/build/plugins,' + root + '/build/internal/plugins',
            '--build-root', td,
            '--source-root', root,
            '--keep-on',
            '--makefiles-dart', td + '/dart',
            '--dump-build-plan', '-',
            '--quiet',
            '--events', '',
            root + '/' + target,
        ]

        return subprocess.check_output(ymake_call, cwd=root)

print(json.dumps(json.loads(run_ymake(conf, sys.argv[1])), indent=4, sort_keys=True))
